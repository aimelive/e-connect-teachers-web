import { FC, useState } from "react";
import { UserChatMessage } from "../../../interfaces/chat";
import ChatUserTile from "./ChatUserTile";
import SelectUserChatModal from "./SelectUserChatModal";
import { useCurrentUser } from "../../../lib/hooks/auth";

interface Props {
  chatUsers: UserChatMessage[];
  currentChatUser: UserChatMessage | null;
  onSelectUserChat: (chatUser: UserChatMessage) => void;
}

const UsersChatsSection: FC<Props> = ({
  chatUsers,
  onSelectUserChat,
  currentChatUser,
}) => {
  const [showModal, setShowModal] = useState(false);
  const { account } = useCurrentUser();
  return (
    <div className="chats px-4 border-r relative h-full">
      <div className="mt-2 h-[70vh] overflow-auto">
        {chatUsers.map((userChat, index) => {
          return (
            <ChatUserTile
              key={index}
              userChat={userChat}
              onClick={() => onSelectUserChat(userChat)}
              isActive={
                userChat.latestMessage.groupInfo.id ===
                currentChatUser?.latestMessage?.groupInfo?.id
              }
            />
          );
        })}
      </div>
      <button
        className="w-16 absolute h-16 text-white rounded-full text-4xl bg-brand bottom-0 right-6"
        onClick={() => setShowModal(true)}
      >
        <img
          src="/icons/addChat.svg"
          alt=""
          className="w-6 text-white fill-white h-6 mx-auto"
        />
      </button>

      <SelectUserChatModal
        open={showModal}
        onClose={() => setShowModal(false)}
        exclude={[account!.id]}
        onSelected={(user) => {
          setShowModal(false);
          let groupChatId = "";
          const currentId = account!.id;
          const peerId = user.id;

          if (currentId >= peerId) {
            groupChatId = `${currentId}-${peerId}`;
          } else {
            groupChatId = `${peerId}-${currentId}`;
          }
          const userChat: UserChatMessage = {
            unread: 0,
            latestMessage: {
              senderId: currentId,
              isAutoGenerated: true,
              message: "bot",
              createdAt: new Date(),
              image: null,
              isGroup: false,
              groupInfo: {
                id: groupChatId,
                avatar: user.profile_pic,
                desc: user.role.name,
                name: user.names,
              },
              senderInfo: {
                id: currentId,
                avatar: account!.profile_pic,
                desc: account!.role.name,
                name: account!.names,
              },
              receivers: [currentId, user.id],
              views: [currentId],
            },
          };
          onSelectUserChat(userChat);
        }}
      />
    </div>
  );
};

export default UsersChatsSection;
