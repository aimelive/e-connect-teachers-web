import { Empty } from "antd";
import { FC, useEffect, useRef } from "react";
import { ChatMessage, UserChatMessage } from "../../../interfaces/chat";
import InputMessageBox from "./InputMessageBox";
import { ChatMessageTile } from "./ChatMessageTile";
import { useCurrentUser } from "../../../lib/hooks/auth";
import { addDoc, collection } from "firebase/firestore";
import { firestore } from "../../../lib/config";

interface Props {
  currentChatUser: UserChatMessage | null;
  chatMessages: ChatMessage[];
  onClose: () => void;
}

const ChatRoomSection: FC<Props> = ({
  currentChatUser,
  onClose,
  chatMessages,
}) => {
  const { account } = useCurrentUser();
  if (!currentChatUser || !account) {
    return (
      <div className="h-full flex flex-col items-center justify-center">
        <Empty />
        <h1 className="text-center text-slate-400">
          The chat you will select will appear here
        </h1>
      </div>
    );
  }

  const handleSendMessage = async (message: string) => {
    const peerUser = currentChatUser.latestMessage.senderInfo;
    let groupInfo = currentChatUser.latestMessage.groupInfo;

    if (
      currentChatUser.latestMessage.senderId != account.id &&
      !currentChatUser.latestMessage.isGroup
    ) {
      groupInfo = {
        id: currentChatUser.latestMessage.groupInfo.id,
        avatar: peerUser.avatar,
        desc: peerUser.desc,
        name: peerUser.name,
      };
    }

    const newChatMessage: ChatMessage = {
      senderId: account.id,
      senderInfo: {
        id: account.id,
        avatar: account.profile_pic,
        desc: account.role.name,
        name: account.names,
      },
      isAutoGenerated: currentChatUser.latestMessage.isAutoGenerated,
      isGroup: currentChatUser.latestMessage.isGroup,
      groupInfo: groupInfo,
      message: message,
      image: null,
      createdAt: new Date(),
      receivers: currentChatUser.latestMessage.receivers,
      views: [account.id],
    };

    await addDoc(collection(firestore, "chatMessages"), newChatMessage);
  };

  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (containerRef.current == null) return;
    containerRef.current.scrollTop = containerRef.current?.scrollHeight;
  }, [currentChatUser, chatMessages.length]);

  return (
    <div className="chats">
      <div className="px-6 relative h-[60vh]">
        <div className="flex items-center gap-4  pb-4 border-b">
          <button onClick={onClose}>
            <img
              src="/icons/close.svg"
              className="w-10 rounded-full h-10 p-2 hover:bg-slate-50"
            />
          </button>
          <div>
            <h1 className="text-lg font-[500]">
              {currentChatUser.latestMessage.groupInfo.name}
            </h1>
            <p>{currentChatUser.latestMessage.groupInfo.desc}</p>
          </div>
        </div>
        <div
          className="p-2 relative flex-grow h-full overflow-y-auto scroll-smooth"
          ref={containerRef}
        >
          {chatMessages.map((chatMessage) => {
            return (
              <ChatMessageTile
                message={chatMessage}
                isMe={chatMessage.senderId === account?.id}
              />
            );
          })}
        </div>
        <InputMessageBox onSend={handleSendMessage} />
      </div>
    </div>
  );
};

export default ChatRoomSection;
